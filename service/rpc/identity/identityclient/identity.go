// Code generated by goctl. DO NOT EDIT!
// Source: identity.proto

package identityclient

import (
	"context"

	"github.com/skywalkerwei/pluton-faster/service/rpc/identity/identity"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClearTokenReq     = identity.ClearTokenReq
	ClearTokenResp    = identity.ClearTokenResp
	GenerateTokenReq  = identity.GenerateTokenReq
	GenerateTokenResp = identity.GenerateTokenResp
	ValidateTokenReq  = identity.ValidateTokenReq
	ValidateTokenResp = identity.ValidateTokenResp

	Identity interface {
		// 生成token，只针对用户服务开放访问
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		// 清除token，只针对用户服务开放访问
		ClearToken(ctx context.Context, in *ClearTokenReq, opts ...grpc.CallOption) (*ClearTokenResp, error)
		// validateToken ，只很对用户服务、授权服务api开放
		ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
	}

	defaultIdentity struct {
		cli zrpc.Client
	}
)

func NewIdentity(cli zrpc.Client) Identity {
	return &defaultIdentity{
		cli: cli,
	}
}

// 生成token，只针对用户服务开放访问
func (m *defaultIdentity) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := identity.NewIdentityClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

// 清除token，只针对用户服务开放访问
func (m *defaultIdentity) ClearToken(ctx context.Context, in *ClearTokenReq, opts ...grpc.CallOption) (*ClearTokenResp, error) {
	client := identity.NewIdentityClient(m.cli.Conn())
	return client.ClearToken(ctx, in, opts...)
}

// validateToken ，只很对用户服务、授权服务api开放
func (m *defaultIdentity) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	client := identity.NewIdentityClient(m.cli.Conn())
	return client.ValidateToken(ctx, in, opts...)
}
